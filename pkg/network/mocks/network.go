// /*
// Copyright Â© 2022 - 2024 SUSE LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// */
//
//

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rancher/elemental-operator/pkg/network (interfaces: Configurator)
//
// Generated by this command:
//
//	mockgen -copyright_file=scripts/boilerplate.go.txt -destination=pkg/network/mocks/network.go -package=mocks github.com/rancher/elemental-operator/pkg/network Configurator
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	v1beta1 "github.com/rancher/elemental-operator/api/v1beta1"
	schema "github.com/rancher/yip/pkg/schema"
	gomock "go.uber.org/mock/gomock"
)

// MockConfigurator is a mock of Configurator interface.
type MockConfigurator struct {
	ctrl     *gomock.Controller
	recorder *MockConfiguratorMockRecorder
}

// MockConfiguratorMockRecorder is the mock recorder for MockConfigurator.
type MockConfiguratorMockRecorder struct {
	mock *MockConfigurator
}

// NewMockConfigurator creates a new mock instance.
func NewMockConfigurator(ctrl *gomock.Controller) *MockConfigurator {
	mock := &MockConfigurator{ctrl: ctrl}
	mock.recorder = &MockConfiguratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigurator) EXPECT() *MockConfiguratorMockRecorder {
	return m.recorder
}

// ApplyConfig mocks base method.
func (m *MockConfigurator) ApplyConfig(arg0 v1beta1.NetworkConfig, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyConfig", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplyConfig indicates an expected call of ApplyConfig.
func (mr *MockConfiguratorMockRecorder) ApplyConfig(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyConfig", reflect.TypeOf((*MockConfigurator)(nil).ApplyConfig), arg0, arg1)
}

// GetFirstBootConfig mocks base method.
func (m *MockConfigurator) GetFirstBootConfig() (schema.YipConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFirstBootConfig")
	ret0, _ := ret[0].(schema.YipConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFirstBootConfig indicates an expected call of GetFirstBootConfig.
func (mr *MockConfiguratorMockRecorder) GetFirstBootConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFirstBootConfig", reflect.TypeOf((*MockConfigurator)(nil).GetFirstBootConfig))
}

// RestoreFirstBootConfig mocks base method.
func (m *MockConfigurator) RestoreFirstBootConfig() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreFirstBootConfig")
	ret0, _ := ret[0].(error)
	return ret0
}

// RestoreFirstBootConfig indicates an expected call of RestoreFirstBootConfig.
func (mr *MockConfiguratorMockRecorder) RestoreFirstBootConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreFirstBootConfig", reflect.TypeOf((*MockConfigurator)(nil).RestoreFirstBootConfig))
}
